============General==================
documentation="Common Dialog Boxes"
notes="Common dialogs used to prompt for a user response."
owner="Malcom Terry"
isProcedureLibrary="true"
============Steps====================
Procedure main
	1 #
		useFieldsInCommand="false"
Procedure init
	1 scriptEval package require Tk
		analyze
			contains can't find package Tk
			assert $value == 1
				When True
					ExitExecution 
					DeclareExecutionIssue Warning:Check your iTest settings menu: Window > Preferences > Spirent > Tcl Interpreter
		useFieldsInCommand="false"
		skippReporting="false"
	2 scriptEval wm withdraw .
		useFieldsInCommand="false"
	3 #Support for "package require rc"
		useFieldsInCommand="false"
		3.1 eval set project [info testCaseProject current]
			useFieldsInCommand="false"
		3.2 eval set script [file uriToPath project://$project/rc.tcl]
			useFieldsInCommand="false"
		3.3 eval set script [string map {\\\\ /} $script]
			useFieldsInCommand="false"
		3.4 scriptSet script $script
			useFieldsInCommand="false"
		3.5 scriptEval package ifneeded rc 1.0 {source $script}
			useFieldsInCommand="false"
Procedure askCheckbox
	1 call init
		useFieldsInCommand="false"
	2 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	5 if $choices != ""
		useFieldsInCommand="false"
		skippReporting="false"
		5.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			5.1.1 scriptSet opt(-choices) $choices
				useFieldsInCommand="false"
				skippReporting="false"
		5.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			5.2.1 scriptEval set opt(-choices) ""
				useFieldsInCommand="false"
				skippReporting="false"
	6 if $checked != ""
		useFieldsInCommand="false"
		skippReporting="false"
		6.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			6.1.1 scriptSet opt(-checked) $checked
				useFieldsInCommand="false"
				skippReporting="false"
		6.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			6.2.1 scriptEval set opt(-checked) ""
				useFieldsInCommand="false"
				skippReporting="false"
	7 if $columns != ""
		useFieldsInCommand="false"
		skippReporting="false"
		7.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			7.1.1 scriptSet opt(-columns) $columns
				useFieldsInCommand="false"
				skippReporting="false"
	8 if $hint != ""
		useFieldsInCommand="false"
		skippReporting="false"
		8.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			8.1.1 scriptSet opt(-hint) "$hint"
				useFieldsInCommand="false"
				skippReporting="false"
		8.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			8.2.1 scriptEval set opt(-hint) ""
				useFieldsInCommand="false"
				skippReporting="false"
	9 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	10 scriptSet opt(-boolean) $boolean
		useFieldsInCommand="false"
	11 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askCheckbox.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	12 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	13 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	14 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	15 sleep 1
		skippReporting="false"
	16 return $response
		skippReporting="false"
Procedure askEntry
	1 call init
		useFieldsInCommand="false"
	2 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 if $initvalue != ""
		useFieldsInCommand="false"
		skippReporting="false"
		4.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			4.1.1 scriptSet opt(-initvalue) $initvalue
				useFieldsInCommand="false"
				skippReporting="false"
		4.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			4.2.1 scriptEval set opt(-initvalue) ""
				useFieldsInCommand="false"
				skippReporting="false"
	5 if $hint != ""
		useFieldsInCommand="false"
		skippReporting="false"
		5.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			5.1.1 scriptSet opt(-hint) "$hint"
				useFieldsInCommand="false"
				skippReporting="false"
		5.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			5.2.1 scriptEval set opt(-hint) ""
				useFieldsInCommand="false"
				skippReporting="false"
	6 scriptSet opt(-width) $width
		useFieldsInCommand="false"
		skippReporting="false"
	7 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	8 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	9 scriptSet opt(-hidetext) $hidetext
		useFieldsInCommand="false"
		skippReporting="false"
	10 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askEntry.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	11 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	12 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	13 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	14 sleep 1
		skippReporting="false"
	15 return $response
		skippReporting="false"
Procedure askInfo
	1 call init
		useFieldsInCommand="false"
	2 eval puts $params
		useFieldsInCommand="false"
		skippReporting="false"
	3 eval set cmdline ""
		useFieldsInCommand="false"
		skippReporting="false"
	4 eval set entrylist ""
		useFieldsInCommand="false"
		skippReporting="false"
	5 foreach item $params 
		useFieldsInCommand="false"
		skippReporting="false"
		5.1 eval set opt_caption [string tolower [string map {" " "_"} $caption]]
			skip="true"
			useFieldsInCommand="false"
			skippReporting="false"
		5.2 eval set itemName [lindex $item 0]
			useFieldsInCommand="false"
		5.3 eval set caption [lindex $item 1]
			useFieldsInCommand="false"
		5.4 eval set defaultValue [lindex $item 2]
			useFieldsInCommand="false"
		5.5 eval set hidetext [lindex $item 3]
			useFieldsInCommand="false"
		5.6 if $hidetext == ""
			useFieldsInCommand="false"
			5.6.1 then 
				useFieldsInCommand="false"
				5.6.1.1 eval set hidetext 0
					useFieldsInCommand="false"
		5.7 eval lappend entrylist $itemName
			useFieldsInCommand="false"
			skippReporting="false"
		5.8 eval set cmdline "$cmdline set opt(-$itemName) \\"$defaultValue\\";"
			useFieldsInCommand="false"
			skippReporting="false"
		5.9 eval set cmdline "$cmdline set opt(-$itemName\\_caption) \\"$caption\\";"
			useFieldsInCommand="false"
			skippReporting="false"
		5.10 eval set cmdline "$cmdline set opt(-$itemName\\_hidetext) $hidetext;"
			useFieldsInCommand="false"
			skippReporting="false"
	6 eval set cmdline "$cmdline set opt(-hint) \\"$hint\\";"
		useFieldsInCommand="false"
		skippReporting="false"
	7 eval set cmdline "$cmdline set opt(-timeout) $timeout;"
		useFieldsInCommand="false"
		skippReporting="false"
	8 eval set cmdline "$cmdline set opt(-width) $width;"
		useFieldsInCommand="false"
		skippReporting="false"
	9 eval set cmdline "$cmdline set opt(-entrylist) \\"$entrylist\\";"
		useFieldsInCommand="false"
		skippReporting="false"
	10 eval set cmdline "$cmdline set opt(-title) \\"$title\\";"
		useFieldsInCommand="false"
		skippReporting="false"
	11 eval set cmdline "$cmdline set opt(-font) \\"$font\\";"
		useFieldsInCommand="false"
		skippReporting="false"
	12 eval set cmdline "$cmdline set opt(-json) $json;"
		useFieldsInCommand="false"
		skippReporting="false"
	13 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	14 scriptSet cmdline $cmdline
		useFieldsInCommand="false"
		skippReporting="false"
	15 scriptEval eval $cmdline
		useFieldsInCommand="false"
		skippReporting="false"
	16 scriptEval array names opt
		useFieldsInCommand="false"
		skippReporting="false"
	17 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askInfo.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	18 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	19 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	20 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	21 return $response
		skippReporting="false"
Procedure askRadio
	1 call init
		useFieldsInCommand="false"
	2 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	5 if $choices != ""
		useFieldsInCommand="false"
		skippReporting="false"
		5.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			5.1.1 scriptSet opt(-choices) $choices
				useFieldsInCommand="false"
				skippReporting="false"
		5.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			5.2.1 scriptEval set opt(-choices) ""
				useFieldsInCommand="false"
				skippReporting="false"
	6 if $initvalue != ""
		useFieldsInCommand="false"
		skippReporting="false"
		6.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			6.1.1 scriptSet opt(-initvalue) $initvalue
				useFieldsInCommand="false"
				skippReporting="false"
		6.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			6.2.1 scriptEval set opt(-initvalue) ""
				useFieldsInCommand="false"
				skippReporting="false"
	7 if $hint != ""
		useFieldsInCommand="false"
		skippReporting="false"
		7.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			7.1.1 scriptSet opt(-hint) "$hint"
				useFieldsInCommand="false"
				skippReporting="false"
		7.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			7.2.1 scriptEval set opt(-hint) ""
				useFieldsInCommand="false"
				skippReporting="false"
	8 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	9 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askRadio.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	10 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	11 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	12 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	13 sleep 1
		skippReporting="false"
	14 return $response
		skippReporting="false"
Procedure askList
	1 call init
		useFieldsInCommand="false"
	2 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptSet opt(-width) $width
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptSet opt(-height) $height
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	7 if $choices != ""
		useFieldsInCommand="false"
		skippReporting="false"
		7.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			7.1.1 scriptSet opt(-choices) $choices
				useFieldsInCommand="false"
				skippReporting="false"
		7.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			7.2.1 scriptEval set opt(-choices) ""
				useFieldsInCommand="false"
				skippReporting="false"
	8 if $initvalue != ""
		useFieldsInCommand="false"
		skippReporting="false"
		8.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			8.1.1 scriptSet opt(-initvalue) $initvalue
				useFieldsInCommand="false"
				skippReporting="false"
		8.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			8.2.1 scriptEval set opt(-initvalue) ""
				useFieldsInCommand="false"
				skippReporting="false"
	9 if $hint != ""
		useFieldsInCommand="false"
		skippReporting="false"
		9.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			9.1.1 scriptSet opt(-hint) "$hint"
				useFieldsInCommand="false"
				skippReporting="false"
		9.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			9.2.1 scriptEval set opt(-hint) ""
				useFieldsInCommand="false"
				skippReporting="false"
	10 if $selectmode != ""
		useFieldsInCommand="false"
		skippReporting="false"
		10.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			10.1.1 scriptSet opt(-selectmode) "$selectmode"
				useFieldsInCommand="false"
				skippReporting="false"
	11 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	12 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askList.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	13 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	14 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	15 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	16 sleep 1
		skippReporting="false"
	17 return $response
		skippReporting="false"
Procedure askYesNo
	1 call init
		useFieldsInCommand="false"
	2 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 if $default != ""
		useFieldsInCommand="false"
		skippReporting="false"
		4.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			4.1.1 scriptSet opt(-default) $default
				useFieldsInCommand="false"
				skippReporting="false"
		4.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			4.2.1 scriptEval set opt(-default) ""
				useFieldsInCommand="false"
				skippReporting="false"
	5 if $question != ""
		useFieldsInCommand="false"
		skippReporting="false"
		5.1 then 
			useFieldsInCommand="false"
			skippReporting="false"
			5.1.1 scriptSet opt(-question) "$question"
				useFieldsInCommand="false"
				skippReporting="false"
		5.2 else 
			useFieldsInCommand="false"
			skippReporting="false"
			5.2.1 scriptEval set opt(-question) ""
				useFieldsInCommand="false"
				skippReporting="false"
	6 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	7 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	8 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/askYesNo.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	9 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	10 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	11 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	12 sleep 1
		skippReporting="false"
	13 return $response
		skippReporting="false"
Procedure errorMsg
	1 call init
		useFieldsInCommand="false"
	2 scriptSet message [subst $message]
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet title $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptEval package require Tk
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptEval wm withdraw .
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptEval tk_messageBox -message $message -type ok -icon error -title $title
		useFieldsInCommand="false"
		skippReporting="false"
Procedure infoMsg
	1 call init
		useFieldsInCommand="false"
	2 scriptSet message [subst $message]
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet title $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptEval package require Tk
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptEval wm withdraw .
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptEval tk_messageBox -message $message -type ok -icon info -title $title
		useFieldsInCommand="false"
		skippReporting="false"
Procedure okMsg
	1 call init
		useFieldsInCommand="false"
	2 scriptSet message [subst $message]
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet title $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptEval package require Tk
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptEval wm withdraw .
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptEval tk_messageBox -message $message -type ok -icon info -title $title
		useFieldsInCommand="false"
		skippReporting="false"
Procedure openFile
	1 scriptSet script [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/openFile.tcl]]
		useFieldsInCommand="false"
	2 scriptEval source $script
		useFieldsInCommand="false"
	3 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	4 sleep 1
		skippReporting="false"
	5 return $response
		skippReporting="false"
Procedure saveFile
	1 scriptSet script [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/saveFile.tcl]]
		useFieldsInCommand="false"
	2 scriptEval source $script
		useFieldsInCommand="false"
	3 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	4 sleep 1
		skippReporting="false"
	5 return $response
		skippReporting="false"
Procedure showMsg
	1 call init
		useFieldsInCommand="false"
	2 #Load the rc package for icon support, etc.
		useFieldsInCommand="false"
		2.1 scriptEval package require rc
			analyze
				contains can't find package rc
				assert $value == 1
					When True
						ExitExecution 
						DeclareExecutionIssue Warning:Missing custom package: rc.tcl
			useFieldsInCommand="false"
	3 scriptSet iTest 1
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptSet opt(-msg) $message
		useFieldsInCommand="false"
	5 scriptSet opt(-title) $title
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptSet opt(-font) $font
		useFieldsInCommand="false"
		skippReporting="false"
	7 scriptSet opt(-icon) $icon
		useFieldsInCommand="false"
		skippReporting="false"
	8 scriptSet opt(-timeout) $timeout
		useFieldsInCommand="false"
		skippReporting="false"
	9 eval set path [string map {\\\\ /} [file uriToPath project://[info testCaseProject current]/showMsg.tcl]]
		useFieldsInCommand="false"
		skippReporting="false"
	10 scriptSet path $path
		useFieldsInCommand="false"
		skippReporting="false"
	11 scriptEval source $path
		useFieldsInCommand="false"
		skippReporting="false"
	12 eval set response [string trim $response]
		useFieldsInCommand="false"
		skippReporting="false"
	13 sleep 1
		skippReporting="false"
	14 return $response
		skippReporting="false"
Procedure warningMsg
	1 call init
		useFieldsInCommand="false"
	2 scriptSet message [subst $message]
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet title $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptEval package require Tk
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptEval wm withdraw .
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptEval tk_messageBox -message $message -type ok -icon warning -title $title
		useFieldsInCommand="false"
		skippReporting="false"
Procedure yesnoMsg
	1 call init
		useFieldsInCommand="false"
	2 scriptSet message [subst $message]
		useFieldsInCommand="false"
		skippReporting="false"
	3 scriptSet title $title
		useFieldsInCommand="false"
		skippReporting="false"
	4 scriptEval package require Tk
		useFieldsInCommand="false"
		skippReporting="false"
	5 scriptEval wm withdraw .
		useFieldsInCommand="false"
		skippReporting="false"
	6 scriptEval set response [tk_messageBox -message $message -type yesno -icon question -title $title]
		useFieldsInCommand="false"
		skippReporting="false"
	7 scriptGet response {$response}
		useFieldsInCommand="false"
		skippReporting="false"
	8 return $response
		skippReporting="false"
